# -*- coding: utf-8 -*-
"""ARIMA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rc6fxUp6fgaudxaz9iEw6Es7-4LDZteg

***ARIMA Model***

An ARIMA model, or autoregressive integrated moving average model, is a statistical model used for forecasting time series data. It is a combination of three different models: an autoregressive (AR) model, an integrated (I) model, and a moving average (MA) model. The ARIMA model is used to forecast future values based on past values. The AR part of the model uses past values to predict future values, the I part of the model integrates or differences the data to make it stationary (i.e., to remove any trend or seasonality), and the MA part of the model uses past errors to predict future errors. ARIMA models are often used for forecasting economic data, such as stock prices or GDP growth, as well as for forecasting natural phenomena, such as weather or earthquakes.

**Step-by-Step Code explanation**



*   The code imports the necessary libraries, including pandas for data manipulation, matplotlib.pyplot for data visualization, and statsmodels.tsa.arima.model for building the ARIMA model.
*   The code loads the dataset from the online source using the pandas read_csv() function.

*   A new column called ‘Date’ is created by combining the ‘Year’ and ‘Month’ columns using the string concatenation operator ‘+’.
*   The ‘Date’ column is converted to a datetime object using the pandas to_datetime() function.

*   The ‘Date’ column is set as the index of the DataFrame using the set_index() function.
*   An ARIMA model is created using the statsmodels.tsa.arima.model.ARIMA() function with the order specified as (5, 1, 0), where 5 is the number of autoregressive terms, 1 is the number of differencing terms, and 0 is the number of moving average terms.

*   The model is fit to the data using the model_fit = model.fit() function.
The future values are forecasted using the model_fit.forecast() function with the number of steps specified as 30.
*   The original data and the forecast are plotted using the matplotlib.pyplot.plot() function, with the label ‘Original data’ and ‘Forecast’ respectively.


*   A legend is added to the plot using the plt.legend() function.
*   
The plot is displayed using the plt.show() function.
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
# Load the dataset from the online source
df = pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/flights.csv')
# Create a new column called 'Date' by combining the 'Year' and 'Month' columns
df['Date'] = df['year'].astype(str) + '-' + df['month'].astype(str)
# Convert the 'Date' column to a datetime object
df['Date'] = pd.to_datetime(df['Date'])
# Set the index to the 'Date' column
df.set_index('Date', inplace=True);
# Create an ARIMA model
model = ARIMA(df['passengers'], order=(5, 1, 0));
# Fit the model to the data
model_fit = model.fit();
# Forecast the future values
forecast = model_fit.forecast(steps=30);
# Plot the original data and the forecast
plt.plot(df['passengers'], label='Original data');
plt.plot(forecast, label='Forecast');
plt.legend();
plt.show();